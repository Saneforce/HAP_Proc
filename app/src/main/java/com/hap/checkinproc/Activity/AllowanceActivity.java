package com.hap.checkinproc.Activity;import android.animation.ArgbEvaluator;import android.animation.ObjectAnimator;import android.animation.ValueAnimator;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import com.google.gson.Gson;import com.google.gson.JsonArray;import com.google.gson.JsonObject;import com.google.gson.reflect.TypeToken;import com.hap.checkinproc.Activity_Hap.AllowancCapture;import com.hap.checkinproc.Activity_Hap.CustomListViewDialog;import com.hap.checkinproc.Activity_Hap.Dashboard;import com.hap.checkinproc.Activity_Hap.Dashboard_Two;import com.hap.checkinproc.Activity_Hap.ERT;import com.hap.checkinproc.Activity_Hap.Help_Activity;import com.hap.checkinproc.Activity_Hap.ProductImageView;import com.hap.checkinproc.Common_Class.CameraPermission;import com.hap.checkinproc.Common_Class.Common_Class;import com.hap.checkinproc.Common_Class.Common_Model;import com.hap.checkinproc.Common_Class.Shared_Common_Pref;import com.hap.checkinproc.Interface.ApiClient;import com.hap.checkinproc.Interface.ApiInterface;import com.hap.checkinproc.Interface.Master_Interface;import com.hap.checkinproc.Model_Class.ModeOfTravel;import com.hap.checkinproc.R;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.lang.reflect.Type;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import id.zelory.compressor.Compressor;import okhttp3.MultipartBody;import okhttp3.RequestBody;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class AllowanceActivity extends AppCompatActivity implements View.OnClickListener, Master_Interface {    LinearLayout BikeMode, BusMode, ReasonPhoto, ProofImage, BusTo, linCheckdriver;    CardView ModeTravel, BusCardTo, CardDailyAllowance;    TextView TextMode, TextToAddress, dailyAllowance;    EditText StartKm, BusFrom, EditRemarks;    ImageView attachedImage;    Button SubmitValue;    SharedPreferences UserDetails, CheckInDetails, sharedpreferences;    Shared_Common_Pref shared_common_pref;    CheckBox driverAllowance;    Common_Model mCommon_model_spinner, Model_Pojo;    List<Common_Model> listOrderType = new ArrayList<>();    List<Common_Model> modelRetailDetails = new ArrayList<>();    List<Common_Model> modelTravelType = new ArrayList<>();    CustomListViewDialog customDialog;    Boolean updateMode = false;    Common_Class common_class;    Gson gson;    List<ModeOfTravel> modelOfTravel;    Type userType;    private ArrayList<String> travelTypeList;    SharedPreferences.Editor editors;    ApiInterface apiInterface;    String startEnd = "", modeId = "", tpData = "", imageConvert = "", imageServer = "", StrToCode = "", STRCode = "",            DM = "", DriverNeed = "false", DriverMode = "", modeTypeVale = "", mode = "", imageURI = "", modeVal = "",            StartedKM = "", FromKm = "", ToKm = "", strDailyAllowance = "", strDriverAllowance = "", StToEnd = "",            StrID = "", driverAllowanceBoolean = "", mypreference = "mypref", CheckInfo = "CheckInDetail", Name = "Allowance",            UserInfo = "MyPrefs", MOT = "ModeOfTravel";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_allowance);        gson = new Gson();        shared_common_pref = new Shared_Common_Pref(this);        sharedpreferences = getSharedPreferences(mypreference, Context.MODE_PRIVATE);        CheckInDetails = getSharedPreferences(CheckInfo, Context.MODE_PRIVATE);        UserDetails = getSharedPreferences(UserInfo, Context.MODE_PRIVATE);        apiInterface = ApiClient.getClient().create(ApiInterface.class);        common_class = new Common_Class(this);        ModeTravel = findViewById(R.id.card_travel_mode);        BikeMode = findViewById(R.id.bike_mode);        BusMode = findViewById(R.id.bus_mode);        ReasonPhoto = findViewById(R.id.reason_photo);        StartKm = findViewById(R.id.edt_km);        BusFrom = findViewById(R.id.edt_frm);        BusCardTo = findViewById(R.id.card_bus_mode);        ProofImage = findViewById(R.id.proof_pic);        attachedImage = findViewById(R.id.capture_img);        EditRemarks = findViewById(R.id.edt_rmk);        SubmitValue = findViewById(R.id.btn_submit);        TextMode = findViewById(R.id.txt_mode);        TextToAddress = findViewById(R.id.edt_to);        CardDailyAllowance = findViewById(R.id.card_daily_allowance);        dailyAllowance = findViewById(R.id.text_daily_allowance);        driverAllowance = findViewById(R.id.da_driver_allowance);        linCheckdriver = findViewById(R.id.lin_check_driver);        BusTo = findViewById(R.id.lin_to_place);        editors = sharedpreferences.edit();        getToolbar();        BusToValue();        tpData = String.valueOf(getIntent().getSerializableExtra("My_Day_Plan"));        Get_MydayPlan();        ModeTravel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                modelTravelType.clear();                dynamicMode();            }        });        BusCardTo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelRetailDetails, 10);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }        });        ProofImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.v("MODE_ID", "DATA " + modeId);                CameraPermission cameraPermission = new CameraPermission(AllowanceActivity.this, getApplicationContext());                if (!cameraPermission.checkPermission()) {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {                        cameraPermission.requestPermission();                    }                    Log.v("PERMISSION_NOT", "PERMISSION_NOT");                } else {                    Log.v("PERMISSION", "PERMISSION");                    editors.putString("SharedMode", startEnd);                    editors.putString("SharedModeTypeVale", TextMode.getText().toString());                    editors.putString("StartedKM", StartKm.getText().toString());                    editors.putString("SharedDailyAllowance", dailyAllowance.getText().toString());                    editors.putString("SharedFromKm", BusFrom.getText().toString());                    editors.putString("SharedToKm", TextToAddress.getText().toString());                    editors.putString("ShareStrEnd", startEnd);                    editors.putString("SharedDriver", DriverMode);                    editors.putString("ShareModeID", modeId);                    editors.putString("StoreId", StrToCode);                    Log.e("startEnd", StartKm.getText().toString());                    editors.commit();                    Intent intent = new Intent(AllowanceActivity.this, AllowancCapture.class);                    intent.putExtra("allowance", "One");                    startActivity(intent);                }            }        });        if (sharedpreferences.contains("SharedImage")) {            imageURI = sharedpreferences.getString("SharedImage", "");            Log.e("imageURI", imageURI);            imageConvert = imageURI.substring(7);            Log.e("COnvert", imageURI.substring(7));            Log.e("COnvert", imageConvert);            getMulipart(imageConvert, 0);            Log.e("IMAGE_URI", imageURI);        }        if (sharedpreferences.contains("SharedDailyAllowance")) {            strDailyAllowance = sharedpreferences.getString("SharedDailyAllowance", "");            Log.e("strDailyAllowance", "Checking" + strDailyAllowance);        }        if (sharedpreferences.contains("SharedDriverAllowance")) {            strDriverAllowance = sharedpreferences.getString("SharedDriverAllowance", "");            Log.e("strDriverAllowance", strDriverAllowance);        }        if (strDailyAllowance.equals("HQ")) {            BusTo.setVisibility(View.GONE);        } else {            BusTo.setVisibility(View.VISIBLE);        }        if (sharedpreferences.contains("SharedFromKm")) {            FromKm = sharedpreferences.getString("SharedFromKm", "");            Log.e("Privacypolicy", "Checking" + FromKm);        }        if (sharedpreferences.contains("SharedToKm")) {            ToKm = sharedpreferences.getString("SharedToKm", "");            Log.e("Privacypolicy", "Checking" + ToKm);        }        if (sharedpreferences.contains("StartedKM")) {            StartedKM = sharedpreferences.getString("StartedKM", "");            Log.e("Privacypolicy", "Checking" + StartedKM);        }        if (sharedpreferences.contains("SharedDriverAllowance")) {            DriverNeed = sharedpreferences.getString("SharedDriverAllowance", "");            Log.e("DriverNeed", DriverNeed);        }        if (sharedpreferences.contains("ShareStrEnd")) {            StToEnd = sharedpreferences.getString("ShareStrEnd", "");            Log.e("Privacypolicy", "StToEnd" + StToEnd);        }        if (sharedpreferences.contains("ShareModeID")) {            modeId = sharedpreferences.getString("ShareModeID", "");            Log.v("StrID_MODeID", modeId);        }        if (sharedpreferences.contains("StoreId")) {            STRCode = sharedpreferences.getString("StoreId", "");            Log.e("Mode_To", sharedpreferences.getString("StoreId", ""));        }        if (sharedpreferences.contains("SharedModeTypeVale")) {            modeTypeVale = sharedpreferences.getString("SharedModeTypeVale", "");            Log.e("SharedModeTypeVale", modeTypeVale);        }        if (sharedpreferences.contains("SharedDriver")) {            DM = sharedpreferences.getString("SharedDriver", "");            Log.e("SharedSharedDriver", DriverMode);        }        if (sharedpreferences.contains("SharedMode")) {            modeVal = sharedpreferences.getString("SharedMode", "");            Log.e("Privacypolicy", "MODE" + modeVal);            if (modeVal.equals("0")) {                TextMode.setText(modeTypeVale);                BusMode.setVisibility(View.VISIBLE);                BikeMode.setVisibility(View.GONE);                ReasonPhoto.setVisibility(View.VISIBLE);                BusFrom.setText(FromKm);                TextToAddress.setText(ToKm);                dailyAllowance.setText(strDailyAllowance);                attachedImage.setImageURI(Uri.parse(imageURI));                attachedImage.setRotation(90);            } else {                TextMode.setText(modeTypeVale);                // BusMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                BikeMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                StartKm.setText(StartedKM);                BusFrom.setText(FromKm);                TextToAddress.setText(ToKm);                dailyAllowance.setText(strDailyAllowance);                attachedImage.setImageURI(Uri.parse(imageURI));                attachedImage.setRotation(90);              /*  if (DriverNeed.equals("true")) {                    linCheckdriver.setVisibility(View.VISIBLE);                    driverAllowance.setChecked(true);                } else {                    linCheckdriver.setVisibility(View.VISIBLE);                }*/                if (TextMode.getText().equals("Four Wheeler")) {                    linCheckdriver.setVisibility(View.VISIBLE);                    if (DriverNeed.equals("true")) {                        driverAllowance.setChecked(true);                    } else {                        driverAllowance.setChecked(false);                    }                }            }            if (!imageURI.matches("")) {                attachedImage.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        Intent intent = new Intent(getApplicationContext(), ProductImageView.class);                        intent.putExtra("ImageUrl", imageURI);                        startActivity(intent);                    }                });            }        }        SubmitValue.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.e("MODE_OF_VAL", modeVal);                if (modeVal.equals("0") || startEnd.equals("0")) {                    if (dailyAllowance.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter daily allowance", Toast.LENGTH_SHORT).show();                    } else if (BusFrom.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter from Address", Toast.LENGTH_SHORT).show();                    } /*else if (TextToAddress.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter To Address", Toast.LENGTH_SHORT).show();                    }*/ else if (TextMode.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter Mode of Travel", Toast.LENGTH_SHORT).show();                    } else if (imageURI.matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter Image", Toast.LENGTH_SHORT).show();                    } else {                        submitData();                    }                } else {                    if (dailyAllowance.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter daily allowance", Toast.LENGTH_SHORT).show();                    } else if (BusFrom.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter from Address", Toast.LENGTH_SHORT).show();                    } /*else if (TextToAddress.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter To Address", Toast.LENGTH_SHORT).show();                    }*/ else if (TextMode.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter Mode of Travel", Toast.LENGTH_SHORT).show();                    } else if (StartKm.getText().toString().matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter Start Km", Toast.LENGTH_SHORT).show();                    } else if (imageURI.matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter Image", Toast.LENGTH_SHORT).show();                    } else {                        submitData();                    }                }            }        });        CardDailyAllowance.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                listOrderType.clear();                OrderType();            }        });        driverAllowance.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    Log.e("LOGGGGGG", "LOGGGGGGGGGGGGGGGG");                    driverAllowanceBoolean = "true";                    SharedPreferences.Editor editor = sharedpreferences.edit();                    editor.putString("SharedDriverAllowance", driverAllowanceBoolean);                    editor.commit();                } else {                    driverAllowanceBoolean = "false";                    SharedPreferences.Editor editor = sharedpreferences.edit();                    editor.putString("SharedDriverAllowance", driverAllowanceBoolean);                    editor.commit();                    DriverNeed = "";                }            }        });    }    /* Order Types*/    public void OrderType() {        travelTypeList = new ArrayList<>();        travelTypeList.add("HQ");        travelTypeList.add("EXQ");        travelTypeList.add("Out Station");        for (int i = 0; i < travelTypeList.size(); i++) {            String id = String.valueOf(travelTypeList.get(i));            String name = travelTypeList.get(i);            mCommon_model_spinner = new Common_Model(id, name, "flag");            listOrderType.add(mCommon_model_spinner);        }        customDialog = new CustomListViewDialog(AllowanceActivity.this, listOrderType, 100);        Window window = customDialog.getWindow();        window.setGravity(Gravity.CENTER);        window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);        customDialog.show();    }    public void getToolbar() {        TextView txtHelp = findViewById(R.id.toolbar_help);        ImageView imgHome = findViewById(R.id.toolbar_home);        txtHelp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), Help_Activity.class));            }        });        TextView txtErt = findViewById(R.id.toolbar_ert);        TextView txtPlaySlip = findViewById(R.id.toolbar_play_slip);        txtErt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), ERT.class));            }        });        txtPlaySlip.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        ObjectAnimator textColorAnim;        textColorAnim = ObjectAnimator.ofInt(txtErt, "textColor", Color.WHITE, Color.TRANSPARENT);        textColorAnim.setDuration(500);        textColorAnim.setEvaluator(new ArgbEvaluator());        textColorAnim.setRepeatCount(ValueAnimator.INFINITE);        textColorAnim.setRepeatMode(ValueAnimator.REVERSE);        textColorAnim.start();        imgHome.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openHome();            }        });    }    public void openHome() {        Boolean CheckIn = CheckInDetails.getBoolean("CheckIn", false);        Shared_Common_Pref.Sf_Code = UserDetails.getString("Sfcode", "");        Shared_Common_Pref.Sf_Name = UserDetails.getString("SfName", "");        Shared_Common_Pref.Div_Code = UserDetails.getString("Divcode", "");        Shared_Common_Pref.StateCode = UserDetails.getString("State_Code", "");        if (CheckIn == true) {            Intent Dashboard = new Intent(AllowanceActivity.this, Dashboard_Two.class);            Dashboard.putExtra("Mode", "CIN");            startActivity(Dashboard);        } else            startActivity(new Intent(getApplicationContext(), Dashboard.class));    }    /*Choosing Dynamic Mode*/    public void dynamicMode() {        Map<String, String> QueryString = new HashMap<>();        QueryString.put("axn", "table/list");        QueryString.put("divisionCode", Shared_Common_Pref.Div_Code);        QueryString.put("sfCode", Shared_Common_Pref.Sf_Code);        QueryString.put("rSF", Shared_Common_Pref.Sf_Code);        QueryString.put("State_Code", Shared_Common_Pref.StateCode);        String commonLeaveType = "{\"tableName\":\"getmodeoftravel\",\"coloumns\":\"[\\\"id\\\",\\\"name\\\",\\\"Leave_Name\\\"]\",\"orderBy\":\"[\\\"name asc\\\"]\",\"desig\":\"mgr\"}";        ApiInterface service = ApiClient.getClient().create(ApiInterface.class);        Call<Object> call = service.GetRouteObjects(QueryString, commonLeaveType);        call.enqueue(new Callback<Object>() {            @Override            public void onResponse(Call<Object> call, Response<Object> response) {                userType = new TypeToken<ArrayList<ModeOfTravel>>() {                }.getType();                modelOfTravel = gson.fromJson(new Gson().toJson(response.body()), userType);                for (int i = 0; i < modelOfTravel.size(); i++) {                    String id = String.valueOf(modelOfTravel.get(i).getStEndNeed());                    String name = modelOfTravel.get(i).getName();                    String modeId = String.valueOf(modelOfTravel.get(i).getId());                    String driverMode = String.valueOf(modelOfTravel.get(i).getDriverNeed());                    Model_Pojo = new Common_Model(id, name, modeId, driverMode);                    modelTravelType.add(Model_Pojo);                }                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelTravelType, 8);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }            @Override            public void onFailure(Call<Object> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    public void BusToValue() {        JSONObject jj = new JSONObject();        try {            jj.put("sfCode", shared_common_pref.getvalue(Shared_Common_Pref.Sf_Code));            jj.put("divisionCode", shared_common_pref.getvalue(Shared_Common_Pref.Div_Code));        } catch (JSONException e) {            e.printStackTrace();        }        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);        Call<JsonArray> call = apiInterface.getBusTo(jj.toString());        call.enqueue(new Callback<JsonArray>() {            @Override            public void onResponse(Call<JsonArray> call, Response<JsonArray> response) {                JsonArray jsonArray = response.body();                for (int a = 0; a < jsonArray.size(); a++) {                    JsonObject jsonObject = (JsonObject) jsonArray.get(a);                    updateMode = true;                    String id = String.valueOf(jsonObject.get("id"));                    String name = String.valueOf(jsonObject.get("name"));                    String townName = String.valueOf(jsonObject.get("ODFlag"));                    name = name.replaceAll("^[\"']+|[\"']+$", "");                    id = id.replaceAll("^[\"']+|[\"']+$", "");                    mCommon_model_spinner = new Common_Model(id, name, "");                    modelRetailDetails.add(mCommon_model_spinner);                }            }            @Override            public void onFailure(Call<JsonArray> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    /*Submit*/    public void submitData() {        shared_common_pref.save("Started_km", StartKm.getText().toString());        shared_common_pref.save("mode_of_travel", TextMode.getText().toString());        String n = "True";        shared_common_pref.save("MC", StrID);        String Mode = TextMode.getText().toString();        SharedPreferences.Editor editor = sharedpreferences.edit();        editor.putString(Name, n);        editor.putString(MOT, Mode);        editor.putString("ModeCount", StrID);        editor.commit();        Log.e("MODE_OF_Travel", TextMode.getText().toString());        try {            JSONObject jj = new JSONObject();            jj.put("km", StartKm.getText().toString());            jj.put("rmk", StartKm.getText().toString());            jj.put("mod", modeId);            jj.put("mode_name", TextMode.getText().toString());            jj.put("StEndNeed", StToEnd);            jj.put("sf", shared_common_pref.getvalue(Shared_Common_Pref.Sf_Code));            jj.put("div", shared_common_pref.getvalue(Shared_Common_Pref.Div_Code));            jj.put("url", imageServer);            jj.put("from", BusFrom.getText().toString());            jj.put("to", TextToAddress.getText().toString());            jj.put("to_code", STRCode);            jj.put("dailyAllowance", dailyAllowance.getText().toString());            jj.put("driverAllowance", DriverNeed);            Log.v("printing_allow", jj.toString());            Call<ResponseBody> Callto;            ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);            Callto = apiInterface.saveAllowance(jj.toString());            Callto.enqueue(new Callback<ResponseBody>() {                @Override                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                    try {                        if (response.isSuccessful()) {                            String jsonData = null;                            jsonData = response.body().string();                            JSONObject js = new JSONObject(jsonData);                            if (js.getString("success").equalsIgnoreCase("true")) {                                Toast.makeText(AllowanceActivity.this, " Submitted successfully ", Toast.LENGTH_SHORT).show();                                common_class.CommonIntentwithFinish(Dashboard.class);                            } else                                Toast.makeText(AllowanceActivity.this, " Cannot submitted the data ", Toast.LENGTH_SHORT).show();                        }                    } catch (Exception e) {                    }                }                @Override                public void onFailure(Call<ResponseBody> call, Throwable t) {                }            });        } catch (Exception e) {        }    }    @Override    public void onClick(View v) {    }    public void getMulipart(String path, int x) {        MultipartBody.Part imgg = convertimg("file", path);        HashMap<String, RequestBody> values = field(UserDetails.getString("Sfcode", ""));        CallApiImage(values, imgg, x);    }    public HashMap<String, RequestBody> field(String val) {        HashMap<String, RequestBody> xx = new HashMap<String, RequestBody>();        xx.put("data", createFromString(val));        return xx;    }    private RequestBody createFromString(String txt) {        return RequestBody.create(MultipartBody.FORM, txt);    }    public MultipartBody.Part convertimg(String tag, String path) {        MultipartBody.Part yy = null;        Log.v("full_profile", path);        try {            if (!TextUtils.isEmpty(path)) {                File file;                file = new File(path);                if (path.contains(".png") || path.contains(".jpg") || path.contains(".jpeg"))                    file = new Compressor(getApplicationContext()).compressToFile(file);                else                    file = new File(path);                RequestBody requestBody = RequestBody.create(MultipartBody.FORM, file);                yy = MultipartBody.Part.createFormData(tag, file.getName(), requestBody);            }        } catch (Exception e) {        }        Log.v("full_profile", yy + "");        return yy;    }    public void CallApiImage(HashMap<String, RequestBody> values, MultipartBody.Part imgg, final int x) {        Call<ResponseBody> Callto;        Callto = apiInterface.uploadkmimg(values, imgg);        Callto.enqueue(new Callback<ResponseBody>() {            @Override            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                Log.v("print_upload_file", "ggg" + response.isSuccessful() + response.body());                //uploading.setText("Uploading "+String.valueOf(count)+"/"+String.valueOf(count_check));                try {                    if (response.isSuccessful()) {                        Log.v("print_upload_file_true", "ggg" + response);                        JSONObject jb = null;                        String jsonData = null;                        jsonData = response.body().string();                        Log.v("request_data_upload", String.valueOf(jsonData));                        JSONObject js = new JSONObject(jsonData);                        if (js.getString("success").equalsIgnoreCase("true")) {                            imageServer = js.getString("url");                            Log.v("printing_dynamic_cou", js.getString("url"));                        }                    }                } catch (Exception e) {                }            }            @Override            public void onFailure(Call<ResponseBody> call, Throwable t) {                Log.v("print_failure", "ggg" + t.getMessage());            }        });    }    @Override    public void OnclickMasterType(List<Common_Model> myDataset, int position, int type) {        customDialog.dismiss();        if (type == 8) {            StrID = "";            TextMode.setText(myDataset.get(position).getName());            startEnd = myDataset.get(position).getId();            StrID = myDataset.get(position).getId();            DriverMode = myDataset.get(position).getCheckouttime();            Log.e("Dash_Mode_Count", startEnd);            shared_common_pref.save("MC", startEnd);            modeId = myDataset.get(position).getFlag();            Log.e("modeId", modeId);            shared_common_pref.save("MC", startEnd);            SharedPreferences.Editor editor = sharedpreferences.edit();            editor.putString("ModeCount", startEnd);            editor.commit();            if (startEnd.equals("0")) {                mode = "11";                BikeMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            } else {                mode = "12";                BikeMode.setVisibility(View.VISIBLE);                //  BusMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            }            attachedImage.setImageResource(0);            if (DriverMode.equals("1")) {                linCheckdriver.setVisibility(View.VISIBLE);            } else {                linCheckdriver.setVisibility(View.GONE);            }            DriverNeed = "";            driverAllowance.setChecked(false);            if (attachedImage.getDrawable() == null) {                Log.e("Image_Draw_able", "Null_Image_View");            } else {                Log.e("Image_Draw_able", "Not_Null_Image_View");            }            Log.e("IMAGE_URI", imageURI);        } else if (type == 10) {            TextToAddress.setText(myDataset.get(position).getName());            StrToCode = myDataset.get(position).getId();            Log.e("STRTOCOD", StrToCode);        } else if (type == 100) {            String TrTyp = myDataset.get(position).getName();            dailyAllowance.setText(TrTyp);            if (TrTyp.equals("HQ")) {                BusTo.setVisibility(View.GONE);            } else {                BusTo.setVisibility(View.VISIBLE);            }            TextToAddress.setText("");        }    }    private void Get_MydayPlan() {        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        String currentDateandTime = sdf.format(new Date());        Log.e("CURRENT_DATE", currentDateandTime);        Map<String, String> QueryString = new HashMap<>();        QueryString.put("axn", "Get/Tp_dayplan");        QueryString.put("Sf_code", Shared_Common_Pref.Sf_Code);        QueryString.put("Date", currentDateandTime);        QueryString.put("divisionCode", Shared_Common_Pref.Div_Code);        QueryString.put("desig", "MGR");        JSONArray jsonArray = new JSONArray();        JSONObject jsonObject = new JSONObject();        JSONObject sp = new JSONObject();        jsonArray.put(jsonObject);        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);        Call<JsonObject> mCall = apiInterface.DCRSave(QueryString, jsonArray.toString());        Log.e("Log_TpQuerySTring", QueryString.toString());        Log.e("Log_Tp_SELECT", jsonArray.toString());        mCall.enqueue(new Callback<JsonObject>() {            @Override            public void onResponse(Call<JsonObject> call, Response<JsonObject> response) {                try {                    JSONObject jsonObject = new JSONObject(new Gson().toJson(response.body()));                    Log.e("GettodayResult", "response Tp_View: " + jsonObject.getJSONArray("GettodayResult"));                    JSONArray jsoncc = jsonObject.getJSONArray("GettodayResult");                    Log.e("LENGTH", String.valueOf(jsoncc.length()));                    if (jsoncc.length() > 0) {                        if (tpData.equals("One")) {                            modeId = String.valueOf(jsoncc.getJSONObject(0).get("Mot_ID"));                            STRCode = String.valueOf(jsoncc.getJSONObject(0).get("To_Place_ID"));                            modeVal = String.valueOf(jsoncc.getJSONObject(0).get("Mode_Travel_Id"));                            if (modeVal.equals("0")) {                                TextMode.setText(modeTypeVale);                                BusMode.setVisibility(View.VISIBLE);                                BikeMode.setVisibility(View.GONE);                                ReasonPhoto.setVisibility(View.VISIBLE);                                TextMode.setText(String.valueOf(jsoncc.getJSONObject(0).get("MOT")));                                BusFrom.setText(String.valueOf(jsoncc.getJSONObject(0).get("From_Place")));                                TextToAddress.setText(String.valueOf(jsoncc.getJSONObject(0).get("To_Place")));                                dailyAllowance.setText(String.valueOf(jsoncc.getJSONObject(0).get("DA_Type")));                                attachedImage.setImageURI(Uri.parse(imageURI));                                attachedImage.setRotation(90);                            } else {                                TextMode.setText(modeTypeVale);                                BusMode.setVisibility(View.VISIBLE);                                BikeMode.setVisibility(View.VISIBLE);                                ReasonPhoto.setVisibility(View.VISIBLE);                                StartKm.setText(StartedKM);                                TextMode.setText(String.valueOf(jsoncc.getJSONObject(0).get("MOT")));                                BusFrom.setText(String.valueOf(jsoncc.getJSONObject(0).get("From_Place")));                                TextToAddress.setText(String.valueOf(jsoncc.getJSONObject(0).get("To_Place")));                                if (jsoncc.getJSONObject(0).get("DA_Type").equals("HQ")) {                                    BusTo.setVisibility(View.GONE);                                } else {                                    BusTo.setVisibility(View.VISIBLE);                                }                                dailyAllowance.setText(String.valueOf(jsoncc.getJSONObject(0).get("DA_Type")));                                attachedImage.setImageURI(Uri.parse(imageURI));                                attachedImage.setRotation(90);                            }                            Log.e("TP_VALUE", StrID);                            Log.e("TP_VALUE", STRCode);                            Log.e("TP_VALUE", modeVal);                            if (String.valueOf(jsoncc.getJSONObject(0).get("Driver_Allow")).equals("1")) {                                linCheckdriver.setVisibility(View.VISIBLE);                                driverAllowance.setChecked(true);                            } else {                                linCheckdriver.setVisibility(View.GONE);                                driverAllowance.setChecked(false);                            }                        }                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(Call<JsonObject> call, Throwable t) {            }        });    }}