package com.hap.checkinproc.Activity;import android.animation.ArgbEvaluator;import android.animation.ObjectAnimator;import android.animation.ValueAnimator;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import com.google.gson.Gson;import com.google.gson.JsonArray;import com.google.gson.JsonObject;import com.google.gson.reflect.TypeToken;import com.hap.checkinproc.Activity_Hap.AllowancCapture;import com.hap.checkinproc.Activity_Hap.CustomListViewDialog;import com.hap.checkinproc.Activity_Hap.Dashboard;import com.hap.checkinproc.Activity_Hap.Dashboard_Two;import com.hap.checkinproc.Activity_Hap.ERT;import com.hap.checkinproc.Activity_Hap.Help_Activity;import com.hap.checkinproc.Common_Class.Common_Class;import com.hap.checkinproc.Common_Class.Common_Model;import com.hap.checkinproc.Common_Class.Shared_Common_Pref;import com.hap.checkinproc.Interface.ApiClient;import com.hap.checkinproc.Interface.ApiInterface;import com.hap.checkinproc.Interface.Master_Interface;import com.hap.checkinproc.Model_Class.ModeOfTravel;import com.hap.checkinproc.R;import org.json.JSONException;import org.json.JSONObject;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class AllowanceActivity extends AppCompatActivity implements View.OnClickListener, Master_Interface {    CardView ModeTravel, BusCardTo, CardDailyAllowance;    LinearLayout BikeMode, BusMode, ReasonPhoto, ProofImage;    EditText StartKm, BusFrom, EditRemarks;    ImageView attachedImage;    Button SubmitValue;    TextView TextMode, TextToAddress, dailyAllowance;    private ArrayList<String> temaplateList;    Common_Model mCommon_model_spinner;    List<Common_Model> listOrderType = new ArrayList<>();    List<Common_Model> modelRetailDetails = new ArrayList<>();    CustomListViewDialog customDialog;    Shared_Common_Pref shared_common_pref;    SharedPreferences sharedpreferences;    public static final String mypreference = "mypref";    public static final String Name = "Allowance";    public static final String MOT = "ModeOfTravel";    String DM = "", DriverNeed = "false", DriverMode = "", modeTypeVale = "", mode = "", imageURI = "", modeVal = "", StartedKM = "", FromKm = "", ToKm = "", Fare = "", strDailyAllowance = "", strDriverAllowance = "", StToEnd = "", StrID = "";    Boolean updateMode = false;    Common_Class common_class;    SharedPreferences CheckInDetails;    SharedPreferences UserDetails;    public static final String CheckInfo = "CheckInDetail";    public static final String UserInfo = "MyPrefs";    Gson gson;    List<ModeOfTravel> modelOfTravel;    Type userType;    Common_Model Model_Pojo;    List<Common_Model> modelTravelType = new ArrayList<>();    String startEnd = "", ModeTravelType = "";    String modeId = "";    private ArrayList<String> travelTypeList;    CheckBox driverAllowance;    String driverAllowanceBoolean = "";    SharedPreferences.Editor editors;    LinearLayout linCheckdriver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_allowance);        shared_common_pref = new Shared_Common_Pref(this);        sharedpreferences = getSharedPreferences(mypreference, Context.MODE_PRIVATE);        gson = new Gson();        CheckInDetails = getSharedPreferences(CheckInfo, Context.MODE_PRIVATE);        UserDetails = getSharedPreferences(UserInfo, Context.MODE_PRIVATE);        common_class = new Common_Class(this);        ModeTravel = findViewById(R.id.card_travel_mode);        BikeMode = findViewById(R.id.bike_mode);        BusMode = findViewById(R.id.bus_mode);        ReasonPhoto = findViewById(R.id.reason_photo);        StartKm = findViewById(R.id.edt_km);        BusFrom = findViewById(R.id.edt_frm);        BusCardTo = findViewById(R.id.card_bus_mode);        ProofImage = findViewById(R.id.proof_pic);        attachedImage = findViewById(R.id.capture_img);        EditRemarks = findViewById(R.id.edt_rmk);        SubmitValue = findViewById(R.id.btn_submit);        TextMode = findViewById(R.id.txt_mode);        TextToAddress = findViewById(R.id.edt_to);        CardDailyAllowance = findViewById(R.id.card_daily_allowance);        dailyAllowance = findViewById(R.id.text_daily_allowance);        driverAllowance = findViewById(R.id.da_driver_allowance);        linCheckdriver = findViewById(R.id.lin_check_driver);        editors = sharedpreferences.edit();        getToolbar();        BusToValue();        ModeTravel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                modelTravelType.clear();                dynamicMode();            }        });        BusCardTo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelRetailDetails, 10);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }        });        ProofImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                editors.putString("SharedMode", startEnd);                editors.putString("SharedModeTypeVale", TextMode.getText().toString());                editors.putString("StartedKM", StartKm.getText().toString());                editors.putString("SharedDailyAllowance", dailyAllowance.getText().toString());                editors.putString("SharedFromKm", BusFrom.getText().toString());                editors.putString("SharedToKm", TextToAddress.getText().toString());                editors.putString("ShareStrEnd", startEnd);                editors.putString("SharedDriver", DriverMode);                editors.putString("ShareModeID", modeId);                Log.e("startEnd", StartKm.getText().toString());                editors.commit();                Intent intent = new Intent(AllowanceActivity.this, AllowancCapture.class);                intent.putExtra("allowance", "One");                startActivity(intent);            }        });        if (sharedpreferences.contains("SharedImage")) {            imageURI = sharedpreferences.getString("SharedImage", "");            Log.e("Privacypolicy", "Checking" + imageURI);        }        if (sharedpreferences.contains("SharedDailyAllowance")) {            strDailyAllowance = sharedpreferences.getString("SharedDailyAllowance", "");            Log.e("strDailyAllowance", "Checking" + strDailyAllowance);        }        if (sharedpreferences.contains("SharedDriverAllowance")) {            strDriverAllowance = sharedpreferences.getString("SharedDriverAllowance", "");            Log.e("strDriverAllowance", strDriverAllowance);        }        if (sharedpreferences.contains("SharedFromKm")) {            FromKm = sharedpreferences.getString("SharedFromKm", "");            Log.e("Privacypolicy", "Checking" + FromKm);        }        if (sharedpreferences.contains("SharedToKm")) {            ToKm = sharedpreferences.getString("SharedToKm", "");            Log.e("Privacypolicy", "Checking" + ToKm);        }        if (sharedpreferences.contains("StartedKM")) {            StartedKM = sharedpreferences.getString("StartedKM", "");            Log.e("Privacypolicy", "Checking" + StartedKM);        }        if (sharedpreferences.contains("SharedDriverAllowance")) {            DriverNeed = sharedpreferences.getString("SharedDriverAllowance", "");            Log.e("DriverNeed", DriverNeed);        }        if (sharedpreferences.contains("ShareStrEnd")) {            StToEnd = sharedpreferences.getString("ShareStrEnd", "");            Log.e("Privacypolicy", "StToEnd" + StToEnd);        }        if (sharedpreferences.contains("ShareModeID")) {            StrID = sharedpreferences.getString("ShareModeID", "");            Log.e("Privacypolicy", "StrID" + StrID);        }        if (sharedpreferences.contains("SharedModeTypeVale")) {            modeTypeVale = sharedpreferences.getString("SharedModeTypeVale", "");            Log.e("SharedModeTypeVale", modeTypeVale);        }        if (sharedpreferences.contains("SharedDriver")) {            DM = sharedpreferences.getString("SharedDriver", "");            Log.e("SharedSharedDriver", DriverMode);        }        if (sharedpreferences.contains("SharedMode")) {            modeVal = sharedpreferences.getString("SharedMode", "");            Log.e("Privacypolicy", "MODE" + modeVal);            if (modeVal.equals("0")) {                TextMode.setText(modeTypeVale);                BusMode.setVisibility(View.VISIBLE);                BikeMode.setVisibility(View.GONE);                ReasonPhoto.setVisibility(View.VISIBLE);                BusFrom.setText(FromKm);                TextToAddress.setText(ToKm);                dailyAllowance.setText(strDailyAllowance);                attachedImage.setImageURI(Uri.parse(imageURI));            } else {                TextMode.setText(modeTypeVale);                BusMode.setVisibility(View.GONE);                BikeMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                StartKm.setText(StartedKM);                dailyAllowance.setText(strDailyAllowance);                attachedImage.setImageURI(Uri.parse(imageURI));                if (DriverNeed.equals("true")) {                    linCheckdriver.setVisibility(View.VISIBLE);                    driverAllowance.setChecked(true);                } else {                    linCheckdriver.setVisibility(View.VISIBLE);                }            }        }        SubmitValue.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (modeVal.equals("0")) {                    if (dailyAllowance.getText().toString().matches("") || BusFrom.getText().toString().matches("") || TextToAddress.getText().toString().matches("") || TextMode.getText().toString().matches("") || imageURI.matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter details", Toast.LENGTH_SHORT).show();                        return;                    } else {                        submitData();                    }                } else {                    if (dailyAllowance.getText().toString().matches("") || TextMode.getText().toString().matches("") || StartKm.getText().toString().matches("") || imageURI.matches("")) {                        Toast.makeText(AllowanceActivity.this, "Enter details", Toast.LENGTH_SHORT).show();                        return;                    } else {                        submitData();                    }                }            }        });        CardDailyAllowance.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                listOrderType.clear();                OrderType();            }        });        driverAllowance.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    Log.e("LOGGGGGG", "LOGGGGGGGGGGGGGGGG");                    driverAllowanceBoolean = "true";                    SharedPreferences.Editor editor = sharedpreferences.edit();                    editor.putString("SharedDriverAllowance", driverAllowanceBoolean);                    editor.commit();                } else {                    driverAllowanceBoolean = "false";                    SharedPreferences.Editor editor = sharedpreferences.edit();                    editor.putString("SharedDriverAllowance", driverAllowanceBoolean);                    editor.commit();                    DriverNeed = "";                }            }        });    }    /* Order Types*/    public void OrderType() {        travelTypeList = new ArrayList<>();        travelTypeList.add("HQ");        travelTypeList.add("EXQ");        travelTypeList.add("Out Station");        for (int i = 0; i < travelTypeList.size(); i++) {            String id = String.valueOf(travelTypeList.get(i));            String name = travelTypeList.get(i);            mCommon_model_spinner = new Common_Model(id, name, "flag");            listOrderType.add(mCommon_model_spinner);        }        customDialog = new CustomListViewDialog(AllowanceActivity.this, listOrderType, 100);        Window window = customDialog.getWindow();        window.setGravity(Gravity.CENTER);        window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);        customDialog.show();    }    public void getToolbar() {        TextView txtHelp = findViewById(R.id.toolbar_help);        ImageView imgHome = findViewById(R.id.toolbar_home);        txtHelp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), Help_Activity.class));            }        });        TextView txtErt = findViewById(R.id.toolbar_ert);        TextView txtPlaySlip = findViewById(R.id.toolbar_play_slip);        txtErt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(getApplicationContext(), ERT.class));            }        });        txtPlaySlip.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });        ObjectAnimator textColorAnim;        textColorAnim = ObjectAnimator.ofInt(txtErt, "textColor", Color.WHITE, Color.TRANSPARENT);        textColorAnim.setDuration(500);        textColorAnim.setEvaluator(new ArgbEvaluator());        textColorAnim.setRepeatCount(ValueAnimator.INFINITE);        textColorAnim.setRepeatMode(ValueAnimator.REVERSE);        textColorAnim.start();        imgHome.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openHome();            }        });    }    public void openHome() {        Boolean CheckIn = CheckInDetails.getBoolean("CheckIn", false);        Shared_Common_Pref.Sf_Code = UserDetails.getString("Sfcode", "");        Shared_Common_Pref.Sf_Name = UserDetails.getString("SfName", "");        Shared_Common_Pref.Div_Code = UserDetails.getString("Divcode", "");        Shared_Common_Pref.StateCode = UserDetails.getString("State_Code", "");        if (CheckIn == true) {            Intent Dashboard = new Intent(AllowanceActivity.this, Dashboard_Two.class);            Dashboard.putExtra("Mode", "CIN");            startActivity(Dashboard);        } else            startActivity(new Intent(getApplicationContext(), Dashboard.class));    }    /*Choosing Dynamic Mode*/    public void dynamicMode() {        Map<String, String> QueryString = new HashMap<>();        QueryString.put("axn", "table/list");        QueryString.put("divisionCode", Shared_Common_Pref.Div_Code);        QueryString.put("sfCode", Shared_Common_Pref.Sf_Code);        QueryString.put("rSF", Shared_Common_Pref.Sf_Code);        QueryString.put("State_Code", Shared_Common_Pref.StateCode);        String commonLeaveType = "{\"tableName\":\"getmodeoftravel\",\"coloumns\":\"[\\\"id\\\",\\\"name\\\",\\\"Leave_Name\\\"]\",\"orderBy\":\"[\\\"name asc\\\"]\",\"desig\":\"mgr\"}";        ApiInterface service = ApiClient.getClient().create(ApiInterface.class);        Call<Object> call = service.GetRouteObjects(QueryString, commonLeaveType);        call.enqueue(new Callback<Object>() {            @Override            public void onResponse(Call<Object> call, Response<Object> response) {                userType = new TypeToken<ArrayList<ModeOfTravel>>() {                }.getType();                modelOfTravel = gson.fromJson(new Gson().toJson(response.body()), userType);                for (int i = 0; i < modelOfTravel.size(); i++) {                    String id = String.valueOf(modelOfTravel.get(i).getStEndNeed());                    String name = modelOfTravel.get(i).getName();                    String modeId = String.valueOf(modelOfTravel.get(i).getId());                    String driverMode = String.valueOf(modelOfTravel.get(i).getDriverNeed());                    Model_Pojo = new Common_Model(id, name, modeId, driverMode);                    Log.e("LeaveType_Request", id);                    Log.e("LeaveType_Request", name);                    Log.e("DriverMode", driverMode);                    modelTravelType.add(Model_Pojo);                }                customDialog = new CustomListViewDialog(AllowanceActivity.this, modelTravelType, 8);                Window window = customDialog.getWindow();                window.setGravity(Gravity.CENTER);                window.setLayout(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT);                customDialog.show();            }            @Override            public void onFailure(Call<Object> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    public void BusToValue() {        JSONObject jj = new JSONObject();        try {            jj.put("sfCode", shared_common_pref.getvalue(Shared_Common_Pref.Sf_Code));            jj.put("divisionCode", shared_common_pref.getvalue(Shared_Common_Pref.Div_Code));        } catch (JSONException e) {            e.printStackTrace();        }        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);        Call<JsonArray> call = apiInterface.getBusTo(jj.toString());        call.enqueue(new Callback<JsonArray>() {            @Override            public void onResponse(Call<JsonArray> call, Response<JsonArray> response) {                JsonArray jsonArray = response.body();                for (int a = 0; a < jsonArray.size(); a++) {                    JsonObject jsonObject = (JsonObject) jsonArray.get(a);                    updateMode = true;                    String id = String.valueOf(jsonObject.get("id"));                    String name = String.valueOf(jsonObject.get("name"));                    String townName = String.valueOf(jsonObject.get("ODFlag"));                    name = name.replaceAll("^[\"']+|[\"']+$", "");                    mCommon_model_spinner = new Common_Model(id, name, "");                    modelRetailDetails.add(mCommon_model_spinner);                }            }            @Override            public void onFailure(Call<JsonArray> call, Throwable t) {                Log.d("LeaveTypeList", "Error");            }        });    }    /*Submit*/    public void submitData() {        shared_common_pref.save("Started_km", StartKm.getText().toString());        shared_common_pref.save("mode_of_travel", TextMode.getText().toString());        String n = "True";        String Mode = TextMode.getText().toString();        SharedPreferences.Editor editor = sharedpreferences.edit();        editor.putString(Name, n);        editor.putString(MOT, Mode);        editor.commit();        Log.e("MODE_OF_Travel", TextMode.getText().toString());        try {            JSONObject jj = new JSONObject();            jj.put("km", StartKm.getText().toString());            jj.put("rmk", StartKm.getText().toString());            jj.put("mod", StrID);            jj.put("mode_name", TextMode.getText().toString());            jj.put("StEndNeed", StToEnd);            jj.put("sf", shared_common_pref.getvalue(Shared_Common_Pref.Sf_Code));            jj.put("div", shared_common_pref.getvalue(Shared_Common_Pref.Div_Code));            jj.put("url", "url");            jj.put("from", BusFrom.getText().toString());            jj.put("to", TextToAddress.getText().toString());            jj.put("dailyAllowance", dailyAllowance.getText().toString());            jj.put("driverAllowance", DriverNeed);            Log.v("printing_allow", jj.toString());            Call<ResponseBody> Callto;            ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);            Callto = apiInterface.saveAllowance(jj.toString());            Callto.enqueue(new Callback<ResponseBody>() {                @Override                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                    try {                        if (response.isSuccessful()) {                            Log.v("print_upload_file_true", "ggg" + response);                            String jsonData = null;                            jsonData = response.body().string();                            Log.v("response_data", jsonData);                            Log.v("response_data", String.valueOf(updateMode));                            JSONObject js = new JSONObject(jsonData);                            if (js.getString("success").equalsIgnoreCase("true")) {                                Toast.makeText(AllowanceActivity.this, " Submitted successfully ", Toast.LENGTH_SHORT).show();                                 common_class.CommonIntentwithFinish(Dashboard.class);                            } else                                Toast.makeText(AllowanceActivity.this, " Cannot submitted the data ", Toast.LENGTH_SHORT).show();                        }                    } catch (Exception e) {                    }                }                @Override                public void onFailure(Call<ResponseBody> call, Throwable t) {                }            });        } catch (Exception e) {        }    }    @Override    public void onClick(View v) {    }    @Override    public void OnclickMasterType(List<Common_Model> myDataset, int position, int type) {        customDialog.dismiss();        if (type == 8) {            TextMode.setText(myDataset.get(position).getName());            startEnd = myDataset.get(position).getId();            DriverMode = myDataset.get(position).getCheckouttime();            Log.e("Dash_Mode_Count", DriverMode);            shared_common_pref.save("MC", startEnd);            modeId = myDataset.get(position).getFlag();            Log.e("modeId", modeId);            SharedPreferences.Editor editor = sharedpreferences.edit();            editor.putString("ModeCount", startEnd);            editor.commit();            if (startEnd.equals("0")) {                mode = "11";                BikeMode.setVisibility(View.GONE);                BusMode.setVisibility(View.VISIBLE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            } else {                mode = "12";                BikeMode.setVisibility(View.VISIBLE);                BusMode.setVisibility(View.GONE);                ReasonPhoto.setVisibility(View.VISIBLE);                FromKm = "";                ToKm = "";                StartedKM = "";                StartKm.setText("");                BusFrom.setText("");                TextToAddress.setText("");            }            attachedImage.setImageResource(0);            if (DriverMode.equals("1")) {                linCheckdriver.setVisibility(View.VISIBLE);            } else {                linCheckdriver.setVisibility(View.GONE);            }            DriverNeed = "";            driverAllowance.setChecked(false);            if (attachedImage.getDrawable() == null) {                Log.e("Image_Draw_able", "Null_Image_View");            } else {                Log.e("Image_Draw_able", "Not_Null_Image_View");            }            Log.e("IMAGE_URI", imageURI);        } else if (type == 10) {            TextToAddress.setText(myDataset.get(position).getName());        } else if (type == 100) {            String TrTyp = myDataset.get(position).getName();            dailyAllowance.setText(TrTyp);        }    }}